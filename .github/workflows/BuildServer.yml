name: 빌드하기 && 정적분석, testCoverage 측정
on:
  push:
    branches:
      - develop
      - release/*
      - backend
      - feature/*
      - hotfix/*
env:
  IMAGE_TAG: ${{ inputs.image-tag || 'latest' }}
  ACTIVE_PROFILE: ${{ inputs.spring-profile-active || 'local' }}
  IMAGE_NAME: ${{ inputs.image-name || 'econo-recruit' }}
# nvironment map contains null values for key(s): MYSQL_HOST, MYSQL_PORT, MYSQL_DATABASE, MYSQL_USERNAME, MYSQL_PASSWORD, JWT_SECRET


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 17 ]
    outputs:
      version: ${{ steps.get_version.outputs.BRANCH_NAME }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check Out The Repository
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'

      - name: Get the version
        id: get_version
        run: |
          RELEASE_VERSION_WITHOUT_V="$(cut -d'v' -f2 <<< ${GITHUB_REF#refs/*/})"
          echo ::set-output name=VERSION::$RELEASE_VERSION_WITHOUT_V 

      - name: Gradle 애드온 준비
        uses: gradle/gradle-build-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Login to Docker Hub
          run: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      - name: Jib 이미지 빌드 & 푸시
        id: build-image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          # cd ./server
          # ./gradlew :Recruit-Api:build --no-daemon -x test
          # cd ..
          echo "DOCKERHUB USERNAME : $DOCKERHUB_USERNAME, DOCKERHUB_PASSWORD : $DOCKERHUB_PASSWORD"
          echo "IMAGE_TAG=$IMAGE_TAG, ACTIVE_PROFILE=$ACTIVE_PROFILE, IMAGE_NAME=$IMAGE_NAME" &&
          cd ./server &&
          chmod +x ./gradlew &&
          ./gradlew jib --warning-mode all -Djib.useOnlyProjectCache=true &&
          cd ..


      #- name: Test with Gradle
      #  run: SPRING_PROFILES_ACTIVE=[test] ./server/gradlew test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # docker build / push to DockerHub Container Registry
      #- name: Build and push
        #  uses: docker/build-push-action@v3
        #with:
          #  context: ./server/Recruit-Api
          # image push 최적화
          #push: true
          #tags: blackbean99/econo-recruit:latest

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: SonarCloud scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd ./server
          ./gradlew sonar --info --stacktrace
          cd ..
